{"version":3,"sources":["main.js"],"names":["hexColor","hexBgColor","mainHex","buttonBg","$","buttonColor","click","setColorValue","refreshSwatch","red","slider","green","blue","hex","rgb2hex","prop","css","orientation","range","max","value","slide","change","hex2rgb","buttonset","r","g","b","toString","each","nr","val","length","join","c","bigint","parseInt","split","a"],"mappings":";;AAAA,IAAAA,QAAA,GAAA,QAAA;AAAA,IACAC,UAAA,GAAA,QADA;AAAA,IAEAC,OAAA,GAAAD,UAFA;AAIA,IAAAE,QAAA,GAAAC,CAAA,CAAA,SAAA,CAAA;AAAA,IACAC,WAAA,GAAAD,CAAA,CAAA,SAAA,CADA;AAGAD,QAAA,CAAAG,KAAA,CAAA,YAAA;AAAAJ,EAAAA,OAAA,GAAAD,UAAA;AAAAM,EAAAA,aAAA;AAAA,CAAA;AACAF,WAAA,CAAAC,KAAA,CAAA,YAAA;AAAAJ,EAAAA,OAAA,GAAAF,QAAA;AAAAO,EAAAA,aAAA;AAAA,CAAA;;AAEA,SAAAC,aAAA,GAAA;AACA,MAAAC,GAAA,GAAAL,CAAA,CAAA,MAAA,CAAA,CAAAM,MAAA,CAAA,OAAA,CAAA;AAAA,MACAC,KAAA,GAAAP,CAAA,CAAA,QAAA,CAAA,CAAAM,MAAA,CAAA,OAAA,CADA;AAAA,MAEAE,IAAA,GAAAR,CAAA,CAAA,OAAA,CAAA,CAAAM,MAAA,CAAA,OAAA,CAFA;AAAA,MAGAG,GAAA,GAAAC,OAAA,CAAAL,GAAA,EAAAE,KAAA,EAAAC,IAAA,CAHA;;AAKA,MAAAT,QAAA,CAAAY,IAAA,CAAA,SAAA,CAAA,EAAA;AACAX,IAAAA,CAAA,CAAA,SAAA,CAAA,CAAAY,GAAA,CAAA,kBAAA,EAAA,MAAAH,GAAA;AACAZ,IAAAA,UAAA,GAAAY,GAAA;AACA,GAHA,MAGA;AACAT,IAAAA,CAAA,CAAA,OAAA,CAAA,CAAAY,GAAA,CAAA,OAAA,EAAA,MAAAH,GAAA;AACAb,IAAAA,QAAA,GAAAa,GAAA;AACA;AACA;;AAEAT,CAAA,CAAA,YAAA;AACAA,EAAAA,CAAA,CAAA,qBAAA,CAAA,CAAAM,MAAA,CAAA;AACAO,IAAAA,WAAA,EAAA,YADA;AAEAC,IAAAA,KAAA,EAAA,KAFA;AAGAC,IAAAA,GAAA,EAAA,GAHA;AAIAC,IAAAA,KAAA,EAAA,GAJA;AAKAC,IAAAA,KAAA,EAAAb,aALA;AAMAc,IAAAA,MAAA,EAAAd;AANA,GAAA;AASAD,EAAAA,aAAA;AACA,CAXA,CAAA;;AAaA,SAAAA,aAAA,GAAA;AACA,MAAAa,KAAA,GAAAG,OAAA,CAAA,MAAArB,OAAA,CAAA;AAEAE,EAAAA,CAAA,CAAA,MAAA,CAAA,CAAAM,MAAA,CAAA,OAAA,EAAAU,KAAA,CAAA,CAAA,CAAA;AACAhB,EAAAA,CAAA,CAAA,QAAA,CAAA,CAAAM,MAAA,CAAA,OAAA,EAAAU,KAAA,CAAA,CAAA,CAAA;AACAhB,EAAAA,CAAA,CAAA,OAAA,CAAA,CAAAM,MAAA,CAAA,OAAA,EAAAU,KAAA,CAAA,CAAA,CAAA;AACA;;AAEAhB,CAAA,CAAA;AAAA,SAAAA,CAAA,CAAA,QAAA,CAAA,CAAAoB,SAAA,EAAA;AAAA,CAAA,CAAA;;AAEA,SAAAV,OAAA,CAAAW,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAA;AACA,MAAAd,GAAA,GAAA,CACAY,CAAA,CAAAG,QAAA,CAAA,EAAA,CADA,EAEAF,CAAA,CAAAE,QAAA,CAAA,EAAA,CAFA,EAGAD,CAAA,CAAAC,QAAA,CAAA,EAAA,CAHA,CAAA;AAMAxB,EAAAA,CAAA,CAAAyB,IAAA,CAAAhB,GAAA,EAAA,UAAAiB,EAAA,EAAAC,GAAA,EAAA;AACA,QAAAA,GAAA,CAAAC,MAAA,KAAA,CAAA,EAAA;AACAnB,MAAAA,GAAA,CAAAiB,EAAA,CAAA,GAAA,MAAAC,GAAA;AACA;AACA,GAJA;AAMA,SAAAlB,GAAA,CAAAoB,IAAA,CAAA,EAAA,CAAA;AACA;;AAEA,SAAAV,OAAA,CAAAW,CAAA,EAAA;AACA,MAAAC,MAAA,GAAAC,QAAA,CAAAF,CAAA,CAAAG,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AAAA,MACAZ,CAAA,GAAAU,MAAA,IAAA,EAAA,GAAA,GADA;AAAA,MAEAT,CAAA,GAAAS,MAAA,IAAA,CAAA,GAAA,GAFA;AAAA,MAGAR,CAAA,GAAAQ,MAAA,GAAA,GAHA;AAAA,MAIAG,CAAA,GAAA,CAAAb,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAJA;AAMA,SAAAW,CAAA;AACA","file":"../templates/index.min.js","sourcesContent":["let hexColor = 'df7f33',\r\n    hexBgColor = '317fda',\r\n    mainHex = hexBgColor;\r\n\r\nconst buttonBg = $( '#radio2' ),\r\n      buttonColor = $( '#radio1' );\r\n\r\nbuttonBg.click(() => { mainHex = hexBgColor; setColorValue() });\r\nbuttonColor.click(() => { mainHex = hexColor; setColorValue() });\r\n\r\nfunction refreshSwatch() {\r\n  const red = $( '#red' ).slider( 'value' ),\r\n        green = $( '#green' ).slider( 'value' ),\r\n        blue = $( '#blue' ).slider( 'value' ),\r\n        hex = rgb2hex( red, green, blue );\r\n\r\n  if(buttonBg.prop( 'checked' )) {\r\n    $( '#swatch' ).css( 'background-color', '#' + hex );\r\n    hexBgColor = hex;\r\n  } else {\r\n    $( '#text' ).css( 'color', '#' + hex );\r\n    hexColor = hex;\r\n  }\r\n}\r\n\r\n$( () => {\r\n  $( '#red, #green, #blue' ).slider({\r\n    orientation: 'horizontal',\r\n    range: 'min',\r\n    max: 255,\r\n    value: 127,\r\n    slide: refreshSwatch,\r\n    change: refreshSwatch\r\n  });\r\n\r\n  setColorValue();\r\n});\r\n\r\nfunction setColorValue() {\r\n  let value = hex2rgb('#' + mainHex);\r\n\r\n  $( '#red' ).slider( 'value', value[0] );\r\n  $( '#green' ).slider( 'value', value[1] );\r\n  $( '#blue' ).slider( 'value', value[2] );\r\n}\r\n\r\n$( () => $( '#radio' ).buttonset() );\r\n\r\nfunction rgb2hex(r, g, b) {\r\n  var hex = [\r\n    r.toString(16),\r\n    g.toString(16),\r\n    b.toString(16)\r\n  ];\r\n\r\n  $.each( hex, function( nr, val ) {\r\n    if ( val.length === 1 ) {\r\n      hex[ nr ] = '0' + val;\r\n    }\r\n  });\r\n\r\n  return hex.join('');\r\n}\r\n\r\nfunction hex2rgb(c) {\r\n  let bigint = parseInt(c.split('#')[1], 16),\r\n      r = (bigint >> 16) & 255,\r\n      g = (bigint >> 8) & 255,\r\n      b = bigint & 255,\r\n      a = [r, g, b];\r\n\r\n  return a;\r\n}"]}